REQUIREMENTS
- You will be given one of the problems below to solve using the simple feature-driven development
process.
- Use object oriented programming from the start. Implement classes that represent the entities in
the problem domain, as well as the applicationâ€™s layers, including the user interface.
- The program must provide a console-based user interface based on a menu system.
Implementation details are up to you.
Implement features 1 and 2.
- Have at least 10 items in your application at startup, generated procedurally.
- Provide specification and tests for all classes and methods involved in the first functionality.
- Implement and use your own exception classes.
Implement features 3 and 4.
- Implement tests as PyUnit unit tests.
- Implement the undo/redo feature

MOVIE RENTAL
Write an application for movie rental. The application will store:
- Movie: <movieId>, <title>, <description>, <genre>.
- Client: <clientId>, <name>.
- Rental: <rentalID>, <movieId>, <clientId>, <rented date>, <due date>, <returned date>.
Create an application which allows the user to:
1. Manage the list of clients and movies. The application must allow the user to add, remove, update,
and list both clients and movies.
2. Rent or return a movie. A client can rent an available movie until a given date, as long as they have
no rented movies that passed their due date for return. A client can return a rented movie at any
time. Only available movies are available for renting.
3. Search for clients or movies using any one of their fields (e.g. movies can be searched for using id,
title, description or genre). The search must work using case-insensitive, partial string matching,
and must return all matching items.
4. Create statistics:
- Most rented movies. This will provide the list of movies, sorted in descending order of the
number of days they were rented.
- Most active clients. This will provide the list of clients, sorted in descending order of the number
of movie rental days they have (e.g. having 2 rented movies for 3 days each counts as 2 x 3 = 6
days).
- Late rentals. All the movies that are currently rented, for which the due date for return has
passed, sorted in descending order of the number of days of delay
5. Unlimited undo/redo functionality. Each step will undo/redo the previous operation performed by
the user. Undo/redo operations must cascade and have a memory-efficient implementation (no
superfluous list copying).
