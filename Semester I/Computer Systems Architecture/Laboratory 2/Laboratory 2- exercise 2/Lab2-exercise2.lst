     1                                  ; Write a program in the assembly language that computes the following arithmetic expression, considering the following data types for the variables:
     2                                  ; a - byte, b - word, c - double word, d - qword - Signed representation where: a=3, b=2, d=6, c=12
     3                                  ; Expression: (c+b+a)-(d+d)=(12+2+3)-(6+6)=17-12=5
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 03                          a DB 3    
    17 00000001 0200                        b DW 2    
    18 00000003 0C000000                    c DD 12   
    19 00000007 0600000000000000            d DQ 6  
    20 0000000F 00000000                    aux DD 0    
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24 00000000 A0[00000000]                    mov AL,byte [a]      ; AL=a=3
    25 00000005 6698                            cbw                  ; signed conversion from AL to AX
    26 00000007 660305[01000000]                add AX,word[b]       ; AX=AX+b=3+2=5
    27 0000000E 6699                            cwd                  ; signed conversion from AX to EAX
    28 00000010 6652                            push DX
    29 00000012 6650                            push AX
    30 00000014 58                              pop EAX              ; EAX=DX:AX
    31 00000015 0305[03000000]                  add EAX,dword[c]     ; EAX=EAX+c=5+12=17=11 (in hexadecimal)
    32 0000001B A3[0F000000]                    mov dword [aux],EAX  ; aux=EAX=17=11 (in hexadecimal)        
    33 00000020 A1[07000000]                    mov EAX,dword[d]     
    34 00000025 8B15[0B000000]                  mov EDX,dword[d+4]   ; EDX:EAX=d=6
    35 0000002B 0305[07000000]                  add EAX,dword[d]
    36 00000031 1305[0B000000]                  adc EAX,dword[d+4]   ; EDX:EAX=EDX:EAX+d=6+6=12=C (in hexadecimal)
    37 00000037 89C3                            mov EBX,EAX          
    38 00000039 89D1                            mov ECX,EDX          ; ECX:EBX=EDX:EAX=12=C (in hexadecimal)
    39 0000003B A1[0F000000]                    mov EAX,dword[aux]   ; EAX=aux=17=11 (in hexadecimal)
    40 00000040 99                              cdq                  ; signed conversion from EAX to EDX:EAX
    41 00000041 BA00000000                      mov EDX,0         
    42 00000046 29D8                            sub EAX,EBX          ; 
    43 00000048 19CA                            sbb EDX,ECX          ; EDX:EAX=EDX:EAX-ECX:EBX=17-12=5
    44 0000004A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    45 0000004C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
