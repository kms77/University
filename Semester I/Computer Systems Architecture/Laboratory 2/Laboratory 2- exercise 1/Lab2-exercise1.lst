     1                                  ; Write a program in the assembly language that computes the following arithmetic expression, considering the following data types for the variables:
     2                                  ; a - byte, b - word, c - double word, d - qword - Unsigned representation where: a=2, b=5, d=1, c=10
     3                                  ; Expression : c-(a+d)+(b+d)=10-(2+1)+(5+1)=10-3+6=7+6=13=D (in hexadecimal)
     4                                  bits 32 ; assembling for the 32 bits architecture
     5                                  
     6                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     7                                  global start        
     8                                  
     9                                  ; declare external functions needed by our program
    10                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    11                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    12                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 02                          a DB 2
    17 00000001 0500                        b DW 5
    18 00000003 0A000000                    c DD 10 
    19 00000007 0100000000000000            d DQ 1    
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 8B1D[07000000]                  mov EBX,dword[d]     
    24 00000006 8B0D[0B000000]                  mov ECX,dword[d+4]   ; ECX:EBX=1
    25 0000000C A0[00000000]                    mov AL,byte [a]      ; AL=a=2 
    26 00000011 B400                            mov AH,0             ; unsigned conversion from AL to AX
    27 00000013 66BA0000                        mov DX,0             ; unsigned conversion from AX to DX:AX
    28 00000017 6652                            push DX
    29 00000019 6650                            push AX
    30 0000001B 58                              pop EAX              ; unsigned conversion from DX:AX to EAX
    31 0000001C BA00000000                      mov EDX,0            ; convert EAX to EDX:EAX
    32 00000021 01D8                            add EAX,EBX
    33 00000023 11CA                            adc EDX,ECX          ; EDX:EAX=EDX:EAX+ECX:EBX=1+2=3
    34 00000025 89C3                            mov EBX,EAX          ; EBX=EAX=3
    35 00000027 A1[03000000]                    mov EAX,dword[c]     ; EAX=c=10=A (in hexadecimal)
    36 0000002C 29D8                            sub EAX,EBX           
    37 0000002E 19CA                            sbb EDX,ECX          ; EDX:EAX=EDX:EAX-ECX:EBX=10-3=7
    38 00000030 89C3                            mov EBX,EAX          ; EBX=EAX=7
    39 00000032 89D1                            mov ECX,EDX          ; ECX=EDX=0
    40 00000034 66A1[01000000]                  mov AX, word[b]      ; AX=b=5
    41 0000003A 66BA0000                        mov DX,0             ; unsigned conversion from AX to DX:AX
    42 0000003E 6652                            push DX
    43 00000040 6650                            push AX
    44 00000042 58                              pop EAX              ; unsigned conversion from DX:AX to EAX
    45 00000043 BA00000000                      mov EDX,0            ; unsigned conversion from EAX to EDX:EAX
    46 00000048 0305[07000000]                  add EAX,dword[d]      
    47 0000004E 1315[0B000000]                  adc EDX,dword[d+4]   ; EDX:EAX=EDX:EAX+d=5+1=6
    48 00000054 01D8                            add EAX,EBX          
    49 00000056 11CA                            adc EDX,ECX          ; EDX:EAX=EDX:EAX+ECX:EBX=6+7=13=D (in hexadecimal)
    50 00000058 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 0000005A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
